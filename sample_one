using NuGet.Common;
using System;
using System.IO;
using System.Threading.Tasks;

namespace simpleLogUsingNuget
{
    class Program
    {
        static void Main(string[] args)
        {
            var logDir = Path.Combine(Directory.GetCurrentDirectory(), $"Log");
            if (!Directory.Exists(logDir))
            {
                Directory.CreateDirectory(logDir);
            }
            var errFile = Path.Combine(logDir, $"ErrorLog{DateTime.Now.Date.ToString("dd-MM-yyyy")}.txt");
            var outFile = Path.Combine(logDir, $"OutputLog{DateTime.Now.Date.ToString("dd-MM-yyyy")}.txt");
            if (!File.Exists(errFile))
            {
                File.Create(errFile);
            }
            if(!File.Exists(outFile))
            {
                File.Create(outFile);
            }
            using(TextWriter error = File.CreateText(errFile))
            {
                using(TextWriter output = File.CreateText(outFile))
                {
                    new Logger(error, output).LogDebug("find me in the output file");
                    new Logger(error, output).LogError("find me in the error file");
                }
            }
            
        }
        private class Logger : ILogger
        {
            private readonly TextWriter _error;
            private readonly TextWriter _out;

            public Logger(TextWriter error, TextWriter @out)
            {
                _error = error;
                _out = @out;
            }

            public void Log(LogLevel level, string data)
            {
                switch (level)
                {
                    case LogLevel.Debug:
                        LogDebug(data);
                        break;
                    case LogLevel.Error:
                        LogError(data);
                        break;
                    case LogLevel.Information:
                        LogInformation(data);
                        break;
                    case LogLevel.Minimal:
                        LogMinimal(data);
                        break;
                    case LogLevel.Verbose:
                        LogVerbose(data);
                        break;
                    case LogLevel.Warning:
                        LogWarning(data);
                        break;
                }
            }

            public void Log(ILogMessage message) => Log(message.Level, message.Message);

            public Task LogAsync(LogLevel level, string data)
            {
                Log(level, data);
                return Task.CompletedTask;
            }

            public Task LogAsync(ILogMessage message) => LogAsync(message.Level, message.Message);

            public void LogDebug(string data) => _out.WriteLine($"Debug: {data}");

            public void LogError(string data) => _error.WriteLine($"Error: {data}");

            public void LogInformation(string data) => _out.WriteLine($"Information: {data}");

            public void LogInformationSummary(string data) => _out.WriteLine($"Summary: {data}");

            public void LogMinimal(string data) => _out.WriteLine($"Minimal: {data}");

            public void LogVerbose(string data) => _out.WriteLine($"Verbose: {data}");

            public void LogWarning(string data) => _out.WriteLine($"Warning: {data}");
        }
    }
}
